from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from keyboard import start_keyboard, admin_keyboard, approved_keyboard
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from database import add_user, get_db, get_position_by_telegram_id

router = Router()
ADMIN_ID = [947159905]


@router.message(Command(commands=['start']))
async def hello(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n'
        '–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª*',
        reply_markup=start_keyboard(),
        parse_mode="Markdown")


class RequestForm(StatesGroup):
    name = State()
    position = State()
    contact_number = State()
    contact_email = State()
    contact_person = State()


@router.callback_query(F.data == 'continue')
async def start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏* (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞):', parse_mode="Markdown")
    await state.set_state(RequestForm.name)


@router.message(StateFilter(RequestForm.name))
async def position(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ *–ø–æ–∑–∏—Ü–∏—é*, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', parse_mode="Markdown")
    await state.set_state(RequestForm.position)


@router.message(StateFilter(RequestForm.position))
async def contact_number(message: Message, state: FSMContext):
    await state.update_data(position=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                                   resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä* –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'.", reply_markup=keyboard,
                         parse_mode="Markdown")
    await state.set_state(RequestForm.contact_number)


@router.message(StateFilter(RequestForm.contact_number))
async def contact_email(message: Message, state: FSMContext):
    if message.contact:
        contact_number = message.contact.phone_number
    else:
        contact_number = message.text
    await state.update_data(contact_number=contact_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –ø–æ—á—Ç—É*:", parse_mode="Markdown")
    await state.set_state(RequestForm.contact_email)


@router.message(StateFilter(RequestForm.contact_email))
async def contact_person(message: Message, state: FSMContext):
    await state.update_data(contact_email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ*:", parse_mode="Markdown")
    await state.set_state(RequestForm.contact_person)


@router.message(StateFilter(RequestForm.contact_person))
async def confirm_request(message: Message, state: FSMContext, bot):
    await state.update_data(contact_person=message.text)
    user_data = await state.get_data()

    async for db_session in get_db():
        await add_user(db_session, {
            'telegram_id': message.from_user.id,
            'name': user_data['name'],
            'position': user_data['position'],
            'contact_number': user_data['contact_number'],
            'contact_email': user_data['contact_email'],
            'contact_person': user_data['contact_person'],
            'status': "pending"
        })

    await message.answer(
        f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:*\n\n"
        f"üìå *–ö–æ–º–ø–∞–Ω–∏—è:* {user_data['name']}\n"
        f"üìå *–ü–æ–∑–∏—Ü–∏—è –∏—Å–∫–æ–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['position']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {user_data['contact_number']}\n"
        f"üìå *–ü–æ—á—Ç–∞:* {user_data['contact_email']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {user_data['contact_person']}\n\n"
        "–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!", parse_mode="Markdown")
    for admin in ADMIN_ID:
        await message.bot.send_message(chat_id=admin, text=
        f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –æ—Ç {message.from_user.full_name}:*\n\n"
        f"üìå *–ö–æ–º–ø–∞–Ω–∏—è:* {user_data['name']}\n"
        f"üìå *–ü–æ–∑–∏—Ü–∏—è –∏—Å–∫–æ–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['position']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {user_data['contact_number']}\n"
        f"üìå *–ü–æ—á—Ç–∞:* {user_data['contact_email']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {user_data['contact_person']}\n\n"
        "–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!", parse_mode="Markdown",
                                       reply_markup=admin_keyboard(message.from_user.id))


class ApprovedRequestForm(StatesGroup):
    date = State()
    price = State()


@router.callback_query(F.data.startswith('approved_'))
async def approved(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.data.split('_')[1]
    await state.update_data(telegram_id=telegram_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ *—Å—Ä–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥*:", parse_mode="Markdown")
    await state.set_state(ApprovedRequestForm.date)


@router.message(StateFilter(ApprovedRequestForm.date))
async def service_cost(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥*:", parse_mode="Markdown")
    await state.set_state(ApprovedRequestForm.price)


@router.message(StateFilter(ApprovedRequestForm.price))
async def send_confirmation(message: Message, state: FSMContext):
    user_data = await state.get_data()

    telegram_id = user_data['telegram_id']
    async for db_session in get_db():
        position = await get_position_by_telegram_id(db_session, telegram_id)

    service_date = user_data['date']
    service_price = message.text

    confirmation_message = (
        f"–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –û–û–û –ê–ì–†–û–ö–û–† –∑–∞ –ø–æ–∏—Å–∫–æ–º –∏ –æ–±—É—á–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å "
        f"*{position}*.\n\n"
        f"üìå –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ–±—É—á–µ–Ω –≤ —Å—Ä–æ–∫ –¥–æ *{service_date}*.\n"
        f"üìå –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞–µ–º–æ–π —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç *{service_price}* —Ä—É–±–ª–µ–π.\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ *¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª*."
    )

    await message.bot.send_message(chat_id=telegram_id, text=confirmation_message, parse_mode="Markdown",
                                   reply_markup=approved_keyboard(telegram_id))


@router.message(F.data.startswith('conf_'))
async def confirm_request(message: Message, state: FSMContext):
    pass


@router.callback_query(F.data.startswith('cancel_'))
async def approved(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.data.split('_')[1]
    await state.update_data(telegram_id=telegram_id)
    await callback.bot.send_message(chat_id=telegram_id, text='–í–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏!')
