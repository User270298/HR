import re
from datetime import datetime
from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from keyboard import start_keyboard, admin_keyboard, approved_keyboard
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from database import add_user, get_db, get_position_by_telegram_id, update_user_status, get_user, addon, add_candidate, \
    get_all_candidates

router = Router()
ADMIN_ID = [ 947159905, 5584822662]  # 947159905,


@router.message(Command(commands=['start']))
async def hello(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!',
        reply_markup=start_keyboard(),
        parse_mode="Markdown")


@router.callback_query(F.data == 'ankets')
async def show_candidates(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async for db_session in get_db():
        candidates = await get_all_candidates(db_session)
    if candidates==[]:
        await callback.message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç!')
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for candidate in candidates:
        message = (
            f'üöÄ –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ üöÄ\n'
            f'üîπ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ: {candidate.specialist}\n'
            f'üîπ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {candidate.position}\n'
            f'üîπ –ß—Ç–æ —É–º–µ—é –ª—É—á—à–µ –≤—Å–µ–≥–æ? {candidate.skills}\n'
            f'üîπ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {candidate.experience}\n'
            f'üîπ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {candidate.education}\n'
            f'üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {candidate.addon}\n\n'
            f'üì© –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º HR: ...'
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        await callback.message.answer(message)

class RequestForm(StatesGroup):
    name = State()
    position = State()
    contact_number = State()
    contact_email = State()
    quality = State()
    contact_person = State()


@router.callback_query(F.data == 'continue')
async def start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏* (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞):', parse_mode="Markdown")
    await state.set_state(RequestForm.name)


@router.message(StateFilter(RequestForm.name))
async def position(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ *–ø–æ–∑–∏—Ü–∏—é*, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', parse_mode="Markdown")
    await state.set_state(RequestForm.position)


@router.message(StateFilter(RequestForm.position))
async def contact_number(message: Message, state: FSMContext):
    await state.update_data(position=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                                   resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä* –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'.", reply_markup=keyboard,
                         parse_mode="Markdown")
    await state.set_state(RequestForm.contact_number)


@router.message(StateFilter(RequestForm.contact_number))
async def contact_email(message: Message, state: FSMContext):
    if message.contact:
        contact_number = message.contact.phone_number
    else:
        contact_number = message.text

    if not re.match(r'^([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)$|(^\+?[0-9]{1,3}[- ]?[0-9]{3}[- ]?[0-9]{3}[- ]?[0-9]{4}$)', contact_number):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.")
        return

    await state.update_data(contact_number=contact_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –ø–æ—á—Ç—É*:", parse_mode="Markdown")
    await state.set_state(RequestForm.contact_email)


@router.message(StateFilter(RequestForm.contact_email))
async def contact_person(message: Message, state: FSMContext):
    if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@example.com.")
        return
    await state.update_data(contact_email=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ*:", parse_mode="Markdown")
    await state.set_state(RequestForm.quality)

@router.message(StateFilter(RequestForm.quality))
async def quality(message: Message, state: FSMContext):
    await state.update_data(contact_person=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞*:", parse_mode="Markdown")
    await state.set_state(RequestForm.contact_person)


@router.message(StateFilter(RequestForm.contact_person))
async def confirm_request(message: Message, state: FSMContext, bot):
    await state.update_data(quality=message.text)
    user_data = await state.get_data()

    async for db_session in get_db():
        await add_user(db_session, {
            'telegram_id': message.from_user.id,
            'name': user_data['name'],
            'position': user_data['position'],
            'contact_number': user_data['contact_number'],
            'contact_email': user_data['contact_email'],
            'quality': user_data['quality'],
            'contact_person': user_data['contact_person'],
            'status': "pending"
        })

    await message.answer(
        f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:*\n\n"
        f"üìå *–ö–æ–º–ø–∞–Ω–∏—è:* {user_data['name']}\n"
        f"üìå *–ü–æ–∑–∏—Ü–∏—è –∏—Å–∫–æ–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['position']}\n"
        f"üìå *–ö–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['quality']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {user_data['contact_number']}\n"
        f"üìå *–ü–æ—á—Ç–∞:* {user_data['contact_email']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {user_data['contact_person']}\n\n"
        "–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!", parse_mode="Markdown")
    for admin in ADMIN_ID:
        await message.bot.send_message(chat_id=admin, text=
        f"‚úÖ *–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {message.from_user.full_name}:*\n\n"
        f"üìå *–ö–æ–º–ø–∞–Ω–∏—è:* {user_data['name']}\n"
        f"üìå *–ü–æ–∑–∏—Ü–∏—è –∏—Å–∫–æ–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['position']}\n"
        f"üìå *–ö–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['quality']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {user_data['contact_number']}\n"
        f"üìå *–ü–æ—á—Ç–∞:* {user_data['contact_email']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {user_data['contact_person']}\n\n"
                                       , parse_mode="Markdown",
                                       reply_markup=admin_keyboard(message.from_user.id))


class ApprovedRequestForm(StatesGroup):
    date = State()
    price = State()


@router.callback_query(F.data.startswith('approved_'))
async def approved(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.data.split('_')[1]
    await state.update_data(telegram_id=telegram_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ *–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥* (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", parse_mode="Markdown")
    await state.set_state(ApprovedRequestForm.date)


@router.message(StateFilter(ApprovedRequestForm.date))
async def service_cost(message: Message, state: FSMContext):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É
        date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date=date.strftime("%d.%m.%Y"))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ *—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥* (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")
        await state.set_state(ApprovedRequestForm.price)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")


@router.message(StateFilter(ApprovedRequestForm.price))
async def send_confirmation(message: Message, state: FSMContext):
    try:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.')
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        service_price = float(message.text.replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Ç–æ—á–∫–∏, —Ç–∞–∫ –∏ –∑–∞–ø—è—Ç–æ–π
        await state.update_data(service_price=service_price)
        user_data = await state.get_data()
        service_date = user_data['date']
        telegram_id = user_data['telegram_id']
        async for db_session in get_db():
            position = await get_position_by_telegram_id(db_session, telegram_id)
            await update_user_status(db_session, telegram_id, 'approved_admin')
            await addon(db_session, telegram_id, str(service_date), str(service_price))

        confirmation_message = (
            f"–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –û–û–û –ê–ì–†–û–ö–û–† –∑–∞ –ø–æ–∏—Å–∫–æ–º –∏ –æ–±—É—á–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å "
            f"*{position}*.\n\n"
            f"üìå –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ–±—É—á–µ–Ω –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤ —Å—Ä–æ–∫ –¥–æ *{service_date}*.\n"
            f"üìå –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞–µ–º–æ–π —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç *{service_price:.2f}* —Ä—É–±–ª–µ–π.\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ *¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª*."
        )

        await message.bot.send_message(chat_id=telegram_id, text=confirmation_message, parse_mode="Markdown",
                                       reply_markup=approved_keyboard(telegram_id))
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:")


@router.callback_query(F.data.startswith('conf_'))
async def confirm_user(callback: CallbackQuery, state: FSMContext):
    telegram_id = int(callback.data.split('_')[1])
    async for db_session in get_db():
        await update_user_status(db_session, telegram_id, 'approved_user')
    await callback.bot.send_message(chat_id=telegram_id,
                                    text='–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥. –ú—ã –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –í–∞–º–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞')
    await callback.bot.send_message(
        chat_id=telegram_id,
        text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n'
             '–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª*',
        reply_markup=start_keyboard(),
        parse_mode="Markdown")
    async for db_session in get_db():
        user_info = await get_user(db_session, telegram_id)
    for admin in ADMIN_ID:
        await callback.bot.send_message(
            chat_id=admin,
            text=f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è {user_info.name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∑–∞—è–≤–∫—É –ø–æ –ø–æ–∏—Å–∫—É {user_info.position}.\n"
                 f"- –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–æ {user_info.service_date}.\n"
                 f"- –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ {user_info.service_price} —Ä—É–±–ª–µ–π.\n"
                 f"- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä {user_info.contact_number}.\n"
                 f"- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ {user_info.contact_email}.\n")


@router.callback_query(F.data.startswith('canc_'))
async def cancel_user(callback: CallbackQuery, state: FSMContext):
    telegram_id = int(callback.data.split('_')[1])
    async for db_session in get_db():
        await update_user_status(db_session, telegram_id, 'cancel_user')
    await callback.bot.send_message(chat_id=telegram_id, text='–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await callback.bot.send_message(
        chat_id=telegram_id,
        text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n'
             '–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª*',
        reply_markup=start_keyboard(),
        parse_mode="Markdown")
    async for db_session in get_db():
        user_info = await get_user(db_session, telegram_id)
    for admin in ADMIN_ID:
        await callback.bot.send_message(
            chat_id=admin,
            text=f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è {user_info.name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∑–∞—è–≤–∫—É –ø–æ –ø–æ–∏—Å–∫—É {user_info.position}.\n"
                 f"- –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–æ {user_info.service_date}.\n"
                 f"- –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ {user_info.service_price} —Ä—É–±–ª–µ–π.\n"
                 f"- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä {user_info.contact_number}.\n"
                 f"- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ {user_info.contact_email}.\n")


class CancelRequestForm(StatesGroup):
    answer_admin = State()


@router.callback_query(F.data.startswith('cancel_'))
async def cancel_admin(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    await state.update_data(telegram_id=telegram_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ *–ø—Ä–∏—á–∏–Ω—É* –æ—Ç–∫–∞–∑–∞:', parse_mode="Markdown")
    await state.set_state(CancelRequestForm.answer_admin)


@router.message(StateFilter(CancelRequestForm.answer_admin))
async def description(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    answer_admin = message.text  # –¢–µ–∫—Å—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
    telegram_id = user_data['telegram_id']  # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ—Ç–∫–∞–∑–æ–º
    await message.bot.send_message(
        chat_id=telegram_id,
        text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ:\n\n{answer_admin}'
    )
    async for db_session in get_db():
        await update_user_status(db_session, telegram_id, 'cancel_admin')
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await message.bot.send_message(
        chat_id=message.from_user.id,
        text=f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {answer_admin}"
    )
    await message.bot.send_message(
        chat_id=telegram_id,
        text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n'
             '–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ *¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª*',
        reply_markup=start_keyboard(),
        parse_mode="Markdown")


class CandidateForm(StatesGroup):
    specialist = State()
    position = State()
    skills = State()
    experience = State()
    education = State()
    addon = State()


@router.message(Command(commands=['admin']))
async def admin(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    if telegram_id not in ADMIN_ID:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()

    print(f"DEBUG: {message.from_user.id} –Ω–∞–∂–∞–ª /admin, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")  # –õ–æ–≥

    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:"
    )
    await state.set_state(CandidateForm.specialist)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(StateFilter(CandidateForm.specialist))
async def process_specialist(message: Message, state: FSMContext):
    await state.update_data(specialist=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    await state.set_state(CandidateForm.position)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(StateFilter(CandidateForm.position))
async def process_position(message: Message, state: FSMContext):
    await state.update_data(position=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    await state.set_state(CandidateForm.skills)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(StateFilter(CandidateForm.skills))
async def process_skills(message: Message, state: FSMContext):
    await state.update_data(skills=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤—ã–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    await state.set_state(CandidateForm.experience)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(StateFilter(CandidateForm.experience))
async def process_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    await state.set_state(CandidateForm.education)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(StateFilter(CandidateForm.education))
async def process_education(message: Message, state: FSMContext):
    await state.update_data(education=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ:")
    await state.set_state(CandidateForm.addon)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(StateFilter(CandidateForm.addon))
async def process_addon(message: Message, state: FSMContext):
    await state.update_data(addon=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    data = await state.get_data()

    async for db_session in get_db():
        await add_candidate(db_session, data)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã –≤ –±—É–¥—É—â–µ–º
    await state.clear()

    await message.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

