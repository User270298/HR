import pytest
from unittest.mock import AsyncMock
from aiogram.types import Message, CallbackQuery, User, Chat
from aiogram.fsm.context import FSMContext
from datetime import datetime
from main import router, RequestForm, CandidateForm


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Message"""
    mock = AsyncMock(spec=Message)
    mock.message_id = 1
    mock.from_user = User(id=123456789, is_bot=False, first_name="TestUser")
    mock.chat = Chat(id=123456789, type="private")
    mock.text = "/start"
    mock.date = datetime.now()
    mock.answer = AsyncMock()
    return mock


@pytest.fixture
def mock_callback():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ CallbackQuery"""
    mock = AsyncMock(spec=CallbackQuery)
    mock.id = "12345"
    mock.from_user = User(id=123456789, is_bot=False, first_name="TestUser")
    mock.message = AsyncMock(spec=Message)
    mock.message.message_id = 1
    mock.message.chat = Chat(id=123456789, type="private")
    mock.message.text = "Test Callback"
    mock.message.date = datetime.now()
    mock.message.answer = AsyncMock()
    mock.data = "continue"
    return mock


@pytest.fixture
def mock_state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è FSMContext"""
    return AsyncMock(spec=FSMContext)


@pytest.mark.asyncio
async def test_start_command(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    await router.message.handlers[0].callback(mock_message)
    mock_message.answer.assert_called_once_with(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É, –æ–±—É—á–µ–Ω–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!',
        reply_markup=mock_message.reply_markup,
        parse_mode="Markdown"
    )


@pytest.mark.asyncio
async def test_continue_callback(mock_callback, mock_state):
    """–¢–µ—Å—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ FSM"""
    await router.callback_query.handlers[0].callback(mock_callback, mock_state)
    mock_callback.message.answer.assert_called_once_with(
        '–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏* (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞):',
        parse_mode="Markdown"
    )
    mock_state.set_state.assert_called_once_with(RequestForm.name)


@pytest.mark.asyncio
async def test_position_state(mock_message, mock_state):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    await router.message.handlers[1].callback(mock_message, mock_state)
    mock_state.update_data.assert_called_once_with(name=mock_message.text)
    mock_message.answer.assert_called_once_with(
        '–í–≤–µ–¥–∏—Ç–µ *–ø–æ–∑–∏—Ü–∏—é*, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:',
        parse_mode="Markdown"
    )
    mock_state.set_state.assert_called_once_with(RequestForm.position)


@pytest.mark.asyncio
async def test_contact_number_state(mock_message, mock_state):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    await router.message.handlers[2].callback(mock_message, mock_state)
    mock_state.update_data.assert_called_once_with(position=mock_message.text)
    mock_message.answer.assert_called_once_with(
        "–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä* –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'.",
        parse_mode="Markdown",
        reply_markup=mock_message.reply_markup
    )
    mock_state.set_state.assert_called_once_with(RequestForm.contact_number)


@pytest.mark.asyncio
async def test_email_state_invalid(mock_message, mock_state):
    """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email"""
    mock_message.text = "invalid_email"
    await router.message.handlers[3].callback(mock_message, mock_state)
    mock_message.answer.assert_called_once_with(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@example.com."
    )


@pytest.mark.asyncio
async def test_email_state_valid(mock_message, mock_state):
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email"""
    mock_message.text = "test@example.com"
    await router.message.handlers[3].callback(mock_message, mock_state)
    mock_state.update_data.assert_called_once_with(contact_email=mock_message.text)
    mock_message.answer.assert_called_once_with(
        "–í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ*:",
        parse_mode="Markdown"
    )
    mock_state.set_state.assert_called_once_with(RequestForm.quality)


@pytest.mark.asyncio
async def test_confirm_request(mock_message, mock_state):
    """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_data = {
        'name': '–ö–æ–º–ø–∞–Ω–∏—è X',
        'position': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        'contact_number': '+79998887766',
        'contact_email': 'test@example.com',
        'quality': '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
        'contact_person': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
    }
    mock_state.get_data.return_value = user_data

    await router.message.handlers[6].callback(mock_message, mock_state)

    mock_message.answer.assert_called_once_with(
        f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:*\n\n"
        f"üìå *–ö–æ–º–ø–∞–Ω–∏—è:* {user_data['name']}\n"
        f"üìå *–ü–æ–∑–∏—Ü–∏—è –∏—Å–∫–æ–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['position']}\n"
        f"üìå *–ö–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:* {user_data['quality']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {user_data['contact_number']}\n"
        f"üìå *–ü–æ—á—Ç–∞:* {user_data['contact_email']}\n"
        f"üìå *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {user_data['contact_person']}\n\n"
        "–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!",
        parse_mode="Markdown"
    )


@pytest.mark.asyncio
async def test_admin_command(mock_message, mock_state):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /admin"""
    mock_message.from_user.id = 947159905  # –û–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await router.message.handlers[7].callback(mock_message, mock_state)

    mock_message.answer.assert_called_once_with(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:"
    )
    mock_state.set_state.assert_called_once_with(CandidateForm.specialist)


@pytest.mark.asyncio
async def test_process_specialist(mock_message, mock_state):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    await router.message.handlers[8].callback(mock_message, mock_state)
    mock_state.update_data.assert_called_once_with(specialist=mock_message.text)
    mock_message.answer.assert_called_once_with("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    mock_state.set_state.assert_called_once_with(CandidateForm.position)


@pytest.mark.asyncio
async def test_process_position(mock_message, mock_state):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    await router.message.handlers[9].callback(mock_message, mock_state)
    mock_state.update_data.assert_called_once_with(position=mock_message.text)
    mock_message.answer.assert_called_once_with("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
    mock_state.set_state.assert_called_once_with(CandidateForm.skills)
